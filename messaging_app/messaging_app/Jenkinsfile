pipeline {
    agent any
    
    environment {
        DOCKER_HUB_CREDENTIALS = credentials('docker-hub-credentials')
        DOCKER_IMAGE = 'your-dockerhub-username/messaging-app'
        DOCKER_TAG = "${env.BUILD_ID}"
    }
    
    tools {
        python "Python3"
    }
    
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main',
                credentialsId: 'your-github-credentials-id',
                url: 'https://github.com/alx-backend-python.git'
            }
        }
        
        stage('Install Dependencies') {
            steps {
                sh 'pip3 install -r messaging_app/requirements.txt'
                sh 'pip3 install pytest pytest-cov'
            }
        }
        
        stage('Run Tests') {
            steps {
                dir('messaging_app') {
                    sh 'python3 -m pytest --junitxml=test-results.xml --cov=. --cov-report=xml:coverage.xml'
                }
            }
            post {
                always {
                    junit 'messaging_app/test-results.xml'
                    cobertura coberturaReportFile: 'messaging_app/coverage.xml'
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                dir('messaging_app') {
                    script {
                        docker.build("${env.DOCKER_IMAGE}:${env.DOCKER_TAG}")
                    }
                }
            }
        }
        
        stage('Push to Docker Hub') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
                        docker.image("${env.DOCKER_IMAGE}:${env.DOCKER_TAG}").push()
                        // Optionally push as latest
                        docker.image("${env.DOCKER_IMAGE}:${env.DOCKER_TAG}").push('latest')
                    }
                }
            }
        }
    }
    
    post {
        always {
            archiveArtifacts artifacts: 'messaging_app/test-results.xml', fingerprint: true
            cleanWs()
        }
        success {
            echo "Pipeline completed successfully. Docker image pushed as ${env.DOCKER_IMAGE}:${env.DOCKER_TAG}"
        }
        failure {
            echo 'Pipeline failed'
        }
    }
}